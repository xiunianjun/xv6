diff --git a/kernel/defs.h b/kernel/defs.h
index 59f7aae..56bb800 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -178,6 +178,13 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void            vmprint(pagetable_t pagetable);
+pagetable_t     perproc_kvminit();
+void            pkvmmap(pagetable_t pgtbl,uint64 va, uint64 pa, uint64 sz, int perm);
+int             kvmcopy(pagetable_t up, pagetable_t kp, uint64 sz);
+
+int             copyinstr_new(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max);
+int             copyin_new(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len);
 int             test_pagetable();
 
 // plic.c
diff --git a/kernel/exec.c b/kernel/exec.c
index 7b8a524..7c7e32e 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -97,7 +97,10 @@ int exec(char *path, char **argv) {
   p->trapframe->sp = sp;          // initial stack pointer
   proc_freepagetable(oldpagetable, oldsz);
 
-  return argc;  // this ends up in a0, the first argument to main(argc, argv)
+  kvmcopy(p->pagetable, p->kpgtbl, p->sz);
+
+ if(p->pid==1) vmprint(p->pagetable);
+  return argc; // this ends up in a0, the first argument to main(argc, argv)
 
 bad:
   if (pagetable) proc_freepagetable(pagetable, sz);
diff --git a/kernel/proc.c b/kernel/proc.c
index 292ccb8..4b58abf 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -111,6 +111,15 @@ found:
     return 0;
   }
 
+  p->kpgtbl = perproc_kvminit();
+
+  char *pa = kalloc();
+  if(pa == 0)
+    panic("kalloc");
+  uint64 va = KSTACK((int) (p - proc));
+  pkvmmap(p->kpgtbl,va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
+  p->kstack = va;
+
   // Set up new context to start executing at forkret,
   // which returns to user space.
   memset(&p->context, 0, sizeof(p->context));
@@ -120,6 +129,22 @@ found:
   return p;
 }
 
+extern char etext[];  // kernel.ld sets this to end of kernel code.
+
+void
+proc_freekpgtbl(pagetable_t pagetable,uint64 stack )
+{
+  uvmunmap(pagetable, UART0, 1, 0);
+  uvmunmap(pagetable, VIRTIO0, 1, 0);
+  uvmunmap(pagetable, CLINT, 0x10000/(uint64)PGSIZE, 0);
+  uvmunmap(pagetable, PLIC, 0X400000/(uint64)PGSIZE, 0);
+  uvmunmap(pagetable, KERNBASE, (uint64)((uint64)etext-KERNBASE)/PGSIZE, 0);
+  uvmunmap(pagetable, (uint64)etext,(PHYSTOP-(uint64)etext)/PGSIZE, 0);
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+  uvmunmap(pagetable, stack, 1, 1);
+  uvmfree(pagetable, 0);
+}
+
 // free a proc structure and the data hanging from it,
 // including user pages.
 // p->lock must be held.
@@ -128,6 +153,9 @@ static void freeproc(struct proc *p) {
   p->trapframe = 0;
   if (p->pagetable) proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
+  if(p->kpgtbl)
+    proc_freekpgtbl(p->kpgtbl,p->kstack);
+  p->kpgtbl = 0;
   p->sz = 0;
   p->pid = 0;
   p->parent = 0;
@@ -192,11 +220,13 @@ void userinit(void) {
   // and data into it.
   uvminit(p->pagetable, initcode, sizeof(initcode));
   p->sz = PGSIZE;
-
+  
   // prepare for the very first "return" from kernel to user.
   p->trapframe->epc = 0;      // user program counter
   p->trapframe->sp = PGSIZE;  // user stack pointer
 
+  kvmcopy(p->pagetable, p->kpgtbl, p->sz);
+
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
 
@@ -213,6 +243,9 @@ int growproc(int n) {
 
   sz = p->sz;
   if (n > 0) {
+    if (PGROUNDUP(sz + n) >= PLIC) // 提示5
+      return -1;
+
     if ((sz = uvmalloc(p->pagetable, sz, sz + n)) == 0) {
       return -1;
     }
@@ -220,6 +253,7 @@ int growproc(int n) {
     sz = uvmdealloc(p->pagetable, sz, sz + n);
   }
   p->sz = sz;
+  kvmcopy(p->pagetable, p->kpgtbl, p->sz);
   return 0;
 }
 
@@ -241,6 +275,13 @@ int fork(void) {
     release(&np->lock);
     return -1;
   }
+
+  if(kvmcopy(np->pagetable, np->kpgtbl, p->sz) < 0){
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+
   np->sz = p->sz;
 
   np->parent = p;
@@ -429,8 +470,11 @@ void scheduler(void) {
         // to release its lock and then reacquire it
         // before jumping back to us.
         p->state = RUNNING;
+        w_satp(MAKE_SATP(p->kpgtbl));
+        sfence_vma();
         c->proc = p;
         swtch(&c->context, &p->context);
+        kvminithart();
 
         // Process is done running for now.
         // It should have changed its p->state before coming back.
@@ -440,8 +484,8 @@ void scheduler(void) {
       }
       release(&p->lock);
     }
-#if !defined(LAB_FS)
-    if (found == 0) {
+#if !defined (LAB_FS)
+    if(found == 0) {
       intr_on();
       asm volatile("wfi");
     }
diff --git a/kernel/proc.h b/kernel/proc.h
index 9c16ea7..7f4578c 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -98,6 +98,7 @@ struct proc {
   uint64 kstack;               // Virtual address of kernel stack
   uint64 sz;                   // Size of process memory (bytes)
   pagetable_t pagetable;       // User page table
+  pagetable_t kpgtbl;       // User page table
   struct trapframe *trapframe; // data page for trampoline.S
   struct context context;      // swtch() here to run process
   struct file *ofile[NOFILE];  // Open files
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 6291b4c..1af1bef 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -30,7 +30,9 @@ uint64 sys_sbrk(void) {
 
   if (argint(0, &n) < 0) return -1;
   addr = myproc()->sz;
-  if (growproc(n) < 0) return -1;
+  if(addr+n >= PLIC)    return -1;
+  if(growproc(n) < 0)
+    return -1;
   return addr;
 }
 
diff --git a/kernel/vm.c b/kernel/vm.c
index b794885..b1503be 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -5,6 +5,8 @@
 #include "riscv.h"
 #include "defs.h"
 #include "fs.h"
+#include "spinlock.h"
+#include "proc.h"
 
 /*
  * the kernel's page table.
@@ -112,10 +114,12 @@ uint64 kvmpa(uint64 va) {
   uint64 off = va % PGSIZE;
   pte_t *pte;
   uint64 pa;
-
-  pte = walk(kernel_pagetable, va, 0);
-  if (pte == 0) panic("kvmpa");
-  if ((*pte & PTE_V) == 0) panic("kvmpa");
+  
+  pte = walk(myproc()->kpgtbl, va, 0);
+  if(pte == 0)
+    panic("kvmpa");
+  if((*pte & PTE_V) == 0)
+    panic("kvmpa");
   pa = PTE2PA(*pte);
   return pa + off;
 }
@@ -130,9 +134,11 @@ int mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
 
   a = PGROUNDDOWN(va);
   last = PGROUNDDOWN(va + size - 1);
-  for (;;) {
-    if ((pte = walk(pagetable, a, 1)) == 0) return -1;
-    if (*pte & PTE_V) panic("remap");
+  for(;;){
+    if((pte = walk(pagetable, a, 1)) == 0)
+      return -1;
+    if(*pte & PTE_V)
+      panic("remap");
     *pte = PA2PTE(pa) | perm | PTE_V;
     if (a == last) break;
     a += PGSIZE;
@@ -236,8 +242,8 @@ void freewalk(pagetable_t pagetable) {
       uint64 child = PTE2PA(pte);
       freewalk((pagetable_t)child);
       pagetable[i] = 0;
-    } else if (pte & PTE_V) {
-      panic("freewalk: leaf");
+    } else if(pte & PTE_V){
+      // panic("freewalk: leaf");
     }
   }
   kfree((void *)pagetable);
@@ -315,67 +321,187 @@ int copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len) {
 // Copy from user to kernel.
 // Copy len bytes to dst from virtual address srcva in a given page table.
 // Return 0 on success, -1 on error.
-int copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len) {
-  uint64 n, va0, pa0;
-
-  while (len > 0) {
-    va0 = PGROUNDDOWN(srcva);
-    pa0 = walkaddr(pagetable, va0);
-    if (pa0 == 0) return -1;
-    n = PGSIZE - (srcva - va0);
-    if (n > len) n = len;
-    memmove(dst, (void *)(pa0 + (srcva - va0)), n);
-
-    len -= n;
-    dst += n;
-    srcva = va0 + PGSIZE;
-  }
-  return 0;
+int
+copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
+{
+    return copyin_new(pagetable, dst, srcva, len);
+  // uint64 n, va0, pa0;
+
+  // while(len > 0){
+  //   va0 = PGROUNDDOWN(srcva);
+  //   pa0 = walkaddr(pagetable, va0);
+  //   if(pa0 == 0)
+  //     return -1;
+  //   n = PGSIZE - (srcva - va0);
+  //   if(n > len)
+  //     n = len;
+  //   memmove(dst, (void *)(pa0 + (srcva - va0)), n);
+
+  //   len -= n;
+  //   dst += n;
+  //   srcva = va0 + PGSIZE;
+  // }
+  // return 0;
 }
 
 // Copy a null-terminated string from user to kernel.
 // Copy bytes to dst from virtual address srcva in a given page table,
 // until a '\0', or max.
 // Return 0 on success, -1 on error.
-int copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max) {
-  uint64 n, va0, pa0;
-  int got_null = 0;
+int
+copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
+{
+  return copyinstr_new(pagetable, dst, srcva, max);
+  // uint64 n, va0, pa0;
+  // int got_null = 0;
+
+  // while(got_null == 0 && max > 0){
+  //   va0 = PGROUNDDOWN(srcva);
+  //   pa0 = walkaddr(pagetable, va0);
+  //   if(pa0 == 0)
+  //     return -1;
+  //   n = PGSIZE - (srcva - va0);
+  //   if(n > max)
+  //     n = max;
+
+  //   char *p = (char *) (pa0 + (srcva - va0));
+  //   while(n > 0){
+  //     if(*p == '\0'){
+  //       *dst = '\0';
+  //       got_null = 1;
+  //       break;
+  //     } else {
+  //       *dst = *p;
+  //     }
+  //     --n;
+  //     --max;
+  //     p++;
+  //     dst++;
+  //   }
+
+  //   srcva = va0 + PGSIZE;
+  // }
+  // if(got_null){
+  //   return 0;
+  // } else {
+  //   return -1;
+  // }
+}
 
-  while (got_null == 0 && max > 0) {
-    va0 = PGROUNDDOWN(srcva);
-    pa0 = walkaddr(pagetable, va0);
-    if (pa0 == 0) return -1;
-    n = PGSIZE - (srcva - va0);
-    if (n > max) n = max;
-
-    char *p = (char *)(pa0 + (srcva - va0));
-    while (n > 0) {
-      if (*p == '\0') {
-        *dst = '\0';
-        got_null = 1;
-        break;
+//在vm.c下
+void
+vmprint_helper(pagetable_t pagetable, int level, uint64 cur_va)
+{
+  // there are 2^9 = 512 PTEs in a page table.
+  for(int i = 0; i < 512; i++){
+    pte_t pte = pagetable[i];
+    if(pte & PTE_V){
+      printf("||");
+      for(int j=1;j<level;j++){
+		    printf("   ||");
+      }
+      int flags = PTE_FLAGS(pte);
+      if((pte & (PTE_R|PTE_W|PTE_X)) == 0){
+        // this PTE points to a lower-level page table.
+        printf("idx: %d: pa: %p, flags: %s%s%s%s\n", i, (uint64)(PTE2PA(pte)), 
+          ((flags & PTE_R) == 0) ? "-" : "r", ((flags & PTE_W) == 0) ? "-" : "w", 
+          ((flags & PTE_X) == 0) ? "-" : "x", ((flags & PTE_U) == 0) ? "-" : "u");
+        uint64 child = PTE2PA(pte);
+        vmprint_helper((pagetable_t)child, level+1, ((cur_va| i) << 16));
       } else {
-        *dst = *p;
+        printf("idx: %d: va: %p -> pa: %p, flags: %s%s%s%s\n", i, ((cur_va | i) << 12), (uint64)(PTE2PA(pte)), 
+          ((flags & PTE_R) == 0) ? "-" : "r", ((flags & PTE_W) == 0) ? "-" : "w", 
+          ((flags & PTE_X) == 0) ? "-" : "x", ((flags & PTE_U) == 0) ? "-" : "u");
       }
-      --n;
-      --max;
-      p++;
-      dst++;
     }
-
-    srcva = va0 + PGSIZE;
   }
-  if (got_null) {
-    return 0;
-  } else {
-    return -1;
+}
+
+// 打印页表
+void
+vmprint(pagetable_t pagetable)
+{
+  // typedef uint64 *pagetable_t;所以pagetable可以以%p形式打印
+  printf("page table %p\n", pagetable);
+  vmprint_helper(pagetable,1,0);
+}
+
+// in vm.c
+void
+pkvmmap(pagetable_t pgtbl,uint64 va, uint64 pa, uint64 sz, int perm)
+{
+  // 当第一个进程开始时，mycpu->proc = null,所以这里不能调用myproc
+  if(mappages(pgtbl, va, sz, pa, perm) != 0)
+    panic("kvmmap");
+}
+
+// in vm.c
+pagetable_t
+perproc_kvminit()
+{
+  pagetable_t pt = (pagetable_t) kalloc();
+  memset(pt, 0, PGSIZE);
+
+  // uart registers
+  pkvmmap(pt,UART0, UART0, PGSIZE, PTE_R | PTE_W);
+
+  // virtio mmio disk interface
+  pkvmmap(pt,VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);
+
+  // CLINT
+  pkvmmap(pt,CLINT, CLINT, 0x10000, PTE_R | PTE_W);
+
+  // PLIC
+  pkvmmap(pt,PLIC, PLIC, 0x400000, PTE_R | PTE_W);
+
+  // map kernel text executable and read-only.
+  pkvmmap(pt,KERNBASE, KERNBASE, (uint64)etext-KERNBASE, PTE_R | PTE_X);
+
+  // map kernel data and the physical RAM we'll make use of.
+  pkvmmap(pt,(uint64)etext, (uint64)etext, PHYSTOP-(uint64)etext, PTE_R | PTE_W);
+
+  // map the trampoline for trap entry/exit to
+  // the highest virtual address in the kernel.
+  pkvmmap(pt,TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
+  return pt;
+}
+
+// in vm.c
+// 效仿的是vm.c中的uvmcopy
+int
+kvmcopy(pagetable_t up, pagetable_t kp, uint64 sz)
+{  
+  pte_t *pte;
+  pte_t *o_pte;
+  uint64 pa, i;
+  uint flags;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    if ((pte = walk(kp, i, 0)) != 0 && (*pte & PTE_V) != 0) {
+      o_pte = pte;
+      if((pte = walk(up, i, 0)) == 0 || (*pte & PTE_V) == 0){
+        // 如果up不存在此项，kp存在，就直接删了
+        uvmunmap(kp, i, 1, 0);
+      }
+      if (*o_pte == (*pte & (~PTE_U))) continue;
+      uvmunmap(kp, i, 1, 0);
+    }
+    pte = walk(up, i, 0);
+
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    flags = (flags & (~PTE_U)); // 注意去除PTE_U，否则内核态无法访问
+
+    pkvmmap(kp, i, pa, PGSIZE, flags);   // user和kernel的页表共用同一个物理页
   }
+  return 0;
 }
 
+
 // check if use global kpgtbl or not
 int test_pagetable() {
   uint64 satp = r_satp();
   uint64 gsatp = MAKE_SATP(kernel_pagetable);
   printf("test_pagetable: %d\n", satp != gsatp);
   return satp != gsatp;
-}
\ No newline at end of file
+}
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..d00491f
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+1
